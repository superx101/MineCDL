// Generated from ./src/mcdl/antlr/Mcdl.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class McdlLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly INTEGER = 5;
	public static readonly NAME = 6;
	public static readonly TAGTEXT = 7;
	public static readonly STRING = 8;
	public static readonly OPEN_ANGLE = 9;
	public static readonly CLOSE_ANGLE = 10;
	public static readonly OPEN_SQUARE = 11;
	public static readonly CLOSE_SQUARE = 12;
	public static readonly OPEN_PAREN = 13;
	public static readonly CLOSE_PAREN = 14;
	public static readonly INDENT = 15;
	public static readonly NEWLINE = 16;
	public static readonly COMMENT_SINGLE = 17;
	public static readonly COMMENT_MULTI = 18;
	public static readonly SW = 19;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "INTEGER", "NAME", "TAGTEXT", "STRING", 
		"OPEN_ANGLE", "CLOSE_ANGLE", "OPEN_SQUARE", "CLOSE_SQUARE", "OPEN_PAREN", 
		"CLOSE_PAREN", "INDENT", "NEWLINE", "COMMENT_SINGLE", "COMMENT_MULTI", 
		"SW",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'|'", "':'", "'<<'", "'...'", undefined, undefined, undefined, 
		undefined, "'<'", "'>'", "'['", "']'", "'('", "')'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "INTEGER", "NAME", 
		"TAGTEXT", "STRING", "OPEN_ANGLE", "CLOSE_ANGLE", "OPEN_SQUARE", "CLOSE_SQUARE", 
		"OPEN_PAREN", "CLOSE_PAREN", "INDENT", "NEWLINE", "COMMENT_SINGLE", "COMMENT_MULTI", 
		"SW",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(McdlLexer._LITERAL_NAMES, McdlLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return McdlLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(McdlLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Mcdl.g4"; }

	// @Override
	public get ruleNames(): string[] { return McdlLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return McdlLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return McdlLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return McdlLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 18:
			this.SW_action(_localctx, actionIndex);
			break;
		}
	}
	private SW_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			0-3
			break;
		}
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x15\x8E\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04" +
		"\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x06\x066\n\x06" +
		"\r\x06\x0E\x067\x03\x07\x03\x07\x07\x07<\n\x07\f\x07\x0E\x07?\v\x07\x03" +
		"\b\x03\b\x03\b\x07\bD\n\b\f\b\x0E\bG\v\b\x03\b\x03\b\x03\t\x03\t\x07\t" +
		"M\n\t\f\t\x0E\tP\v\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03" +
		"\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x05\x10e\n\x10\x03\x11\x05\x11h\n\x11\x03\x11\x03\x11\x03\x12" +
		"\x03\x12\x07\x12n\n\x12\f\x12\x0E\x12q\v\x12\x03\x12\x05\x12t\n\x12\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x07" +
		"\x13\x7F\n\x13\f\x13\x0E\x13\x82\v\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x06ENo\x80\x02" +
		"\x02\x15\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02" +
		"\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02" +
		"\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15\x03" +
		"\x02\x05\x03\x022;\x05\x02C\\aac|\x06\x022;C\\aac|\x02\x96\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02" +
		"\x03)\x03\x02\x02\x02\x05+\x03\x02\x02\x02\x07-\x03\x02\x02\x02\t0\x03" +
		"\x02\x02\x02\v5\x03\x02\x02\x02\r9\x03\x02\x02\x02\x0F@\x03\x02\x02\x02" +
		"\x11J\x03\x02\x02\x02\x13S\x03\x02\x02\x02\x15U\x03\x02\x02\x02\x17W\x03" +
		"\x02\x02\x02\x19Y\x03\x02\x02\x02\x1B[\x03\x02\x02\x02\x1D]\x03\x02\x02" +
		"\x02\x1Fd\x03\x02\x02\x02!g\x03\x02\x02\x02#k\x03\x02\x02\x02%y\x03\x02" +
		"\x02\x02\'\x89\x03\x02\x02\x02)*\x07~\x02\x02*\x04\x03\x02\x02\x02+,\x07" +
		"<\x02\x02,\x06\x03\x02\x02\x02-.\x07>\x02\x02./\x07>\x02\x02/\b\x03\x02" +
		"\x02\x0201\x070\x02\x0212\x070\x02\x0223\x070\x02\x023\n\x03\x02\x02\x02" +
		"46\t\x02\x02\x0254\x03\x02\x02\x0267\x03\x02\x02\x0275\x03\x02\x02\x02" +
		"78\x03\x02\x02\x028\f\x03\x02\x02\x029=\t\x03\x02\x02:<\t\x04\x02\x02" +
		";:\x03\x02\x02\x02<?\x03\x02\x02\x02=;\x03\x02\x02\x02=>\x03\x02\x02\x02" +
		">\x0E\x03\x02\x02\x02?=\x03\x02\x02\x02@A\x07B\x02\x02AE\x07*\x02\x02" +
		"BD\v\x02\x02\x02CB\x03\x02\x02\x02DG\x03\x02\x02\x02EF\x03\x02\x02\x02" +
		"EC\x03\x02\x02\x02FH\x03\x02\x02\x02GE\x03\x02\x02\x02HI\x07+\x02\x02" +
		"I\x10\x03\x02\x02\x02JN\x07$\x02\x02KM\v\x02\x02\x02LK\x03\x02\x02\x02" +
		"MP\x03\x02\x02\x02NO\x03\x02\x02\x02NL\x03\x02\x02\x02OQ\x03\x02\x02\x02" +
		"PN\x03\x02\x02\x02QR\x07$\x02\x02R\x12\x03\x02\x02\x02ST\x07>\x02\x02" +
		"T\x14\x03\x02\x02\x02UV\x07@\x02\x02V\x16\x03\x02\x02\x02WX\x07]\x02\x02" +
		"X\x18\x03\x02\x02\x02YZ\x07_\x02\x02Z\x1A\x03\x02\x02\x02[\\\x07*\x02" +
		"\x02\\\x1C\x03\x02\x02\x02]^\x07+\x02\x02^\x1E\x03\x02\x02\x02_e\x07\v" +
		"\x02\x02`a\x07\"\x02\x02ab\x07\"\x02\x02bc\x07\"\x02\x02ce\x07\"\x02\x02" +
		"d_\x03\x02\x02\x02d`\x03\x02\x02\x02e \x03\x02\x02\x02fh\x07\x0F\x02\x02" +
		"gf\x03\x02\x02\x02gh\x03\x02\x02\x02hi\x03\x02\x02\x02ij\x07\f\x02\x02" +
		"j\"\x03\x02\x02\x02ko\x07%\x02\x02ln\v\x02\x02\x02ml\x03\x02\x02\x02n" +
		"q\x03\x02\x02\x02op\x03\x02\x02\x02om\x03\x02\x02\x02ps\x03\x02\x02\x02" +
		"qo\x03\x02\x02\x02rt\x07\x0F\x02\x02sr\x03\x02\x02\x02st\x03\x02\x02\x02" +
		"tu\x03\x02\x02\x02uv\x07\f\x02\x02vw\x03\x02\x02\x02wx\b\x12\x02\x02x" +
		"$\x03\x02\x02\x02yz\x07$\x02\x02z{\x07$\x02\x02{|\x07$\x02\x02|\x80\x03" +
		"\x02\x02\x02}\x7F\v\x02\x02\x02~}\x03\x02\x02\x02\x7F\x82\x03\x02\x02" +
		"\x02\x80\x81\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x81\x83\x03\x02\x02" +
		"\x02\x82\x80\x03\x02\x02\x02\x83\x84\x07$\x02\x02\x84\x85\x07$\x02\x02" +
		"\x85\x86\x07$\x02\x02\x86\x87\x03\x02\x02\x02\x87\x88\b\x13\x02\x02\x88" +
		"&\x03\x02\x02\x02\x89\x8A\x07\"\x02\x02\x8A\x8B\b\x14\x03\x02\x8B\x8C" +
		"\x03\x02\x02\x02\x8C\x8D\b\x14\x02\x02\x8D(\x03\x02\x02\x02\f\x027=EN" +
		"dgos\x80\x04\b\x02\x02\x03\x14\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!McdlLexer.__ATN) {
			McdlLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(McdlLexer._serializedATN));
		}

		return McdlLexer.__ATN;
	}

}

